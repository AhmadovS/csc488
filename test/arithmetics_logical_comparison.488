% This program mainly tests for all arithmetic, logical and comparison operators
% Authors: Amir Hossein Heidari Zadi (heidariz), Ross Bevacqua (bevacqu2)

{

% Variable declarations
var input1 : Integer          % Integer variable
var input2 : Integer          % Boolean variable
var input3[2] : Integer       % Integer array
var input4[-5..-4] : Boolean  % Boolean array

var a : Integer
var b : Integer
var c : Integer

var P : Boolean
var Q : Boolean
var R : Boolean

% Reads multiple inputs from stdin
% TODO: can we read into a boolean variable?
read input1, input2, input3[1], input3[2], input4[-5], input4[-4]

write input1           % Writes Integer to stdout
write - input2         % Evaluates unary
write input1 + input2  % Evaluates addition operations
write input1 - input2  % Evaluates subtraction operation
write input1 * input2  % Evaluates multiplication operations

%-------------------------------
% Logical tests
%-------------------------------

P := true
Q := false
R := not P  % Complex boolean assignment including variables

% test logical OR operator 

write true or false % simple, no variable
write P or P % (both True)
write P or Q	% (one False and another True)
write not P or P % (more complex logical expression)

% test logical AND operator

write true and true % simple, no variable
write P and P % (both True) (true)
write Q and P % (one False and the other True) (false)
write R and not Q and P % (more complex logical expression) (false)

% test logical NOT operator
write not false % (simple, no variable) (true)
write not Q % (variable is False) (true)
write not P and Q or not Q and R % (complex expression) (false)

%-------------------------------
% Comparison tests
%-------------------------------

% Variable assignment
a := -1
b := 2
c := 3 * b + a  % Complex integer assignment including variables

P := true
Q := false
R := not P  % Complex boolean assignment including variables


if a = a then write "Passed!"      % Equality comparison
if a not = b then write "Passed!"  % Inequality comparison 
if a < b then write "Passed!"      % Less than comparison
if a <= a then write "Passed!"     % Less than or equal comparison (equal test)
if a <= b then write "Passed!"     % Less than or equal comparison (less than test)
if c > b then write "Passed!"      % Greater than comparison
if c >= c then write "Passed!"     % Greater than or equal comparison (equal test)
if c >= b then write "Passed!"     % Greater than or equal comparison (greater than test)


%-------------------------------
% Conditional tests (using arithmetic, logic, and comparisons)
%-------------------------------

% Single-statement conditional if/then/else statement
% Greater-than comparison
if input2 > 0 then
    write input1 / input2  % Evaluates division operation
else
    write "Error", "Input2 must be greater than zero"  % Multiple text output sequence
}

% Single-statement conditional if/then/else statement
% logical expression used
if P or not R then 
	write R
else
	write "False", "Both P is False"

% Single-statement conditional if/then/else statement
% arithmetic, logical and comparison operators in single expression
if input1 * input2 <= input2 * 3 and input1 > 0 then
	write input1 * input2
else
	write "Conditional test 2 is False"

% Multiple-statement conditional if/then/else statement
% Less-than comparison, also contains newline

if input1 < 2 or input2 > 5 then {
	write "Conditional Test 3 is True", newline
	write "Second statement in scope Executed"
} else {
	write "Conditional Test 3 is False", newline
	write "Second statement in scope Executed"
}

% Conditional Expressions

write (input1 > 5 ? "True" : "False") % simple text output expression
write (input1 > 5 ? 4 / 2 : 2 + 2)  % simple arithmetic output expression
write (input2 - 2 not= -1 and input1 >= 3 ? "True" : "False") % more complex input expression
write (input2 - 3 = 1 or input1 > 3 ? 3 + 2 <= input1 : 3 + 2 > input1) % complex conditional expression with logical output 




