// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.
import compiler488.ast.*;		// import all the AST classes (might be a bit overkill)
import compiler488.ast.decl.*;
import compiler488.ast.expn.*;
import compiler488.ast.stmt.*;
import compiler488.ast.type.*;

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;
	
	/* Override the report_error method so it will display the line and
	 * column of where the error occurred in the input as well as the
	 * reason for the error which is passed into the method in the
	 * String 'message'.
	 * @param message  error message to print
	 * @param info	 symbol containing line/column numbers
	 */
	public void report_error(String message, Object info)
	{
	String st =  "Error";
   
		if (info instanceof java_cup.runtime.Symbol)
		{
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

		/* s.left is supposed to hold the line number of the error.
		 * s.right is supposed to hold the column number.
			 * If either is < 0 the parser may have run off the end of the program
			 * and a Syntax Error message without line number may be printed.
		 */
   
			if (s.left >= 0)				// Check line number.
			{
				st += " in line " + (s.left + 1);
				if (s.right >= 0)			// Check column number.
					st += ", column " + (s.right + 1);
			}
			else
			   st += " at end of input " ;
		}
		st += ": " + message;
		System.err.println (st);
		lastError = st;
	}
   
	// Override the report_fatal_error method to use the report_error method.
	/** @throws SyntaxErrorException						*/
	public void report_fatal_error (String message, Object info) throws SyntaxErrorException
	{
		report_error (message, info);
		throw new SyntaxErrorException (lastError);
	}
   
	// version string for printing version in Main
	public static final String version = "Winter 2017" ;

:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2017 

// Terminals returned by the scanner with no value attached.  
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal 	BOOLEAN,INTEGER,FUNCTION,PROCEDURE	;
terminal	DO,	ELSE,	EXIT,   IF	;
terminal	READ, 	REPEAT,	RETURN,	NEWLINE,THEN,	UNTIL	;
terminal	VAR,	WHEN,	WHILE,	WITHX,	WRITE 	;

// Special-character terminals, no value attached
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY	;
terminal	EQUAL,	GREATER,LESS,	COMMA,  DOT, QUESTION, COLON	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal	program,	statement,	declaration,	scope	;
nonterminal	statements,	declarations,	matchedStatement, unmatchedStatement ;
nonterminal	variablenames,		output			;
nonterminal	type,  	arguments,	parameters,	variable	;
nonterminal 	expression,	variablename 			;

nonterminal	inputs, outputs, bound ;
nonterminal	procedureCall, parameter, conjunction, negation, compareExpn ;
nonterminal	arithExpn, term, factor, primary, constant ;

// Non-terminals that have a value.
// nonterminal type  nameList ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented out.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;		// Higher precedence.
precedence   left ELSE ;

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program		::=	scope:s	
				{:
					Scope scope = (Scope) s;
					RESULT = new Program(scope.getDeclarations(), scope.getStatements());
				:}
				;								// the main program

scope		::=	L_CURLEY  declarations:d statements:s  R_CURLEY  	// scope with declarations and statements
			{:
				// System.out.println("Found " + d);
				// System.out.println("Found " + s);
				RESULT = new Scope((ASTList<Declaration>) d, (ASTList<Stmt>) s);
			:}
		|	L_CURLEY statements:s  R_CURLEY 		// scope with statments only
			{:
				RESULT = new Scope((ASTList<Stmt>) s);
				RESULT.setParent(
			:}
		|	L_CURLEY  R_CURLEY			// empty scope
			{:
				RESULT = new Scope();
			:}
		;

statements	::=	statement:s						// sequence of statements
			{:
				RESULT = new ASTList<Stmt>((Stmt) s);
			:}
		|	statements:ss statement:s
			{:
				RESULT = ((ASTList<Stmt>) ss).addLast((Stmt) s);
			:}
		;

declarations	::=	declaration:d						// sequence of declarations
			{:
				RESULT = new ASTList<Declaration>((Declaration) d);
			:}
		|	declarations:ds declaration:d
			{: 
				RESULT = ((ASTList<Declaration>) ds).addLast((Declaration) d);
			:}
		;

statement	::=	matchedStatement:m
			{: 
				RESULT = m;
			:}
		|	unmatchedStatement:u
			{: 
				RESULT = u;
			:}
		;

matchedStatement::=	variable:v COLON EQUAL expression:e				// assignment statement
			{: 
				RESULT = new AssignStmt((Expn) v, (Expn) e); 
			:}
		|	IF expression:e THEN matchedStatement:m1 ELSE matchedStatement:m2 // if statements
			{:
				RESULT = new IfStmt((Expn) e, (Stmt) m1, (Stmt) m2);
			:}
		|	WHILE expression:e DO statement:s				// while statement
			{:
				RESULT = new WhileDoStmt((Expn) e, (Stmt) s);
			:}
		|	REPEAT statement:s  UNTIL expression:e			// repeat statement
			{:
				RESULT = new RepeatUntilStmt((Expn) e, (Stmt) s);
			:}
		|	EXIT							// exit statements
			{:
				RESULT = new ExitStmt();
			:}
		|	EXIT INTCONST:i
			{:
				RESULT = new ExitStmt((Integer) i);
			:}
		|	EXIT WHEN expression:e
			{:
				RESULT = new ExitStmt((Expn) e);
			:}
		|	EXIT INTCONST:i WHEN expression:e
			{:
				RESULT = new ExitStmt((Expn) e, (Integer) i);
			:}
		|	RETURN WITHX  expression:e 
			{:
				RESULT = new ReturnStmt((Expn) e);
			:}
		|	RETURN 							// return statements
			{:
				RESULT = new ReturnStmt();
			:}
		|	WRITE outputs:o						// input/output statments
			{: 
				RESULT = new WriteStmt((ASTList<Printable>) o); 
			:}
		|	READ  inputs:i
			{:
				RESULT = new ReadStmt((ASTList<compiler488.ast.Readable>) i); 
			:}
		|	procedureCall:p						// procedure call
			{: 
				RESULT = p; 
			:}
		|	scope:s							// embedded scope
			{: 
				RESULT = s; 
			:}
		;

unmatchedStatement::=	IF expression:e THEN statement:s	
			{:
				RESULT = new IfStmt((Expn) e, (Stmt) s);
			:}
		|	IF expression:e THEN matchedStatement:m ELSE unmatchedStatement:u
			{:
				RESULT = new IfStmt((Expn) e, (Stmt) m, (Stmt) u);
			:}
		;

procedureCall	::=	IDENT:i 							// call procedure with no parameters
			{:
				RESULT = new ProcedureCallStmt(i);
			:}
		|	IDENT:i L_PAREN arguments:a R_PAREN  			// call procedure with parameters
			{:
				RESULT = new ProcedureCallStmt(i, (ASTList<Expn>) a);
			:}
		;

declaration	::=	VAR variablenames:vs COLON type:t			// declare scalar/array variables
			{:
				RESULT = new MultiDeclarations((Type) t, (ASTList<DeclarationPart>) vs);
			:}
		|	FUNCTION IDENT:i COLON type:t scope:s			// declare function
			{:
				RoutineBody body = new RoutineBody((Scope) s);
				RESULT = new RoutineDecl(i, (Type) t, body);
			:}
		|	FUNCTION  IDENT:i L_PAREN parameters:p R_PAREN COLON type:t scope:s
			{:
				RoutineBody body = new RoutineBody((ASTList<ParameterDecl>) p, (Scope) s);
				RESULT = new RoutineDecl(i, (Type) t, body);
			:}
		|	PROCEDURE IDENT:i scope:s			//  declare procedure
			{:
				RoutineBody body = new RoutineBody((Scope) s);
				RESULT = new RoutineDecl(i, body);
			:}
		|	PROCEDURE IDENT:i L_PAREN parameters:p R_PAREN scope:s
			{:
				RoutineBody body = new RoutineBody((ASTList<ParameterDecl>) p, (Scope) s);;
				RESULT = new RoutineDecl(i, body);
			:}
		;

variablenames	::=	variablename:v  				// list of variables being declared
			{:
				RESULT = new ASTList<DeclarationPart>((DeclarationPart) v);
			:}
		|	variablenames:vs COMMA variablename:v 
			{:
				RESULT = ((ASTList<DeclarationPart>) vs).addLast((DeclarationPart) v);
			:}
		;

variablename	::=	IDENT:i 						// scalar variable
			{:
				RESULT = new ScalarDeclPart(i);
			:}
		|	IDENT:i1 L_SQUARE INTCONST:i2 R_SQUARE		// array variable with upper bound
			{:
				RESULT = new ArrayDeclPart(i1, (int) 1, (int) i2);
			:}
		|	IDENT:i1 L_SQUARE bound:i2 DOT DOT bound:i3  R_SQUARE	// array variable with upper/lower bounds
			{:
				RESULT = new ArrayDeclPart(i1, (int) i2, (int) i3);
			:}
		;

bound		::=	INTCONST:i					// positive array bound
			{:
				RESULT = i;
			:}
		|	MINUS INTCONST:i					// negative array bound
			{:
				RESULT = -1 * i;
			:}
		;

type		::=	INTEGER			// integer type
			{:
				RESULT = new IntegerType();
			:}
		|	BOOLEAN			// boolean type
			{:
				RESULT = new BooleanType();
			:}
		;

outputs		::=	output:o			// list of output expressions
			{:
				RESULT = new ASTList<Printable>((Printable) o);
			:}
		|	outputs:os COMMA output:o
			{:
				RESULT = ((ASTList<Printable>) os).addLast((Printable)o);
			:}
		;

output		::=	expression:e		// integer expression
			{:
				RESULT = e;
			:}
		|	TEXTCONST:t		// text constant
			{: 
				RESULT = new TextConstExpn((String) t);
			:}
		|	NEWLINE			// newline constant
			{:
				RESULT = new SkipConstExpn();
			:}
		;

inputs		::=	variable:v		// list of variables being read into
			{:
				RESULT = new ASTList<compiler488.ast.Readable>((compiler488.ast.Readable) v);
			:}
		|	inputs:i COMMA variable:v
			{:
				RESULT = ((ASTList<compiler488.ast.Readable>) i).addLast((compiler488.ast.Readable)v);
			:}
		;

arguments	::=	expression:e			// list of function/procedure arguments
			{:
				RESULT = new ASTList<Expn>((Expn) e);
			:}
		|	arguments:a COMMA expression:e
			{:
				RESULT = ((ASTList<Expn>) a).addLast((Expn) e);
			:}
		;

parameters	::=	parameter:p			// list of function/procedure formal parameters
			{:
				RESULT = new ASTList<ParameterDecl>((ParameterDecl) p);
			:}
		|	parameters:ps COMMA parameter:p
			{:
				RESULT = ((ASTList<ParameterDecl>) ps).addLast((ParameterDecl) p);
			:}
		;

parameter	::=	IDENT:i COLON type:t 		// declare one parameter
			{:
				RESULT = new ParameterDecl(i, (Type) t);
			:}
		;

expression	::=	conjunction:c			// disjunctions, associate left-to-right
			{:
				RESULT = c;
			:}
		|	expression:e OR conjunction:c
			{:
				RESULT = new BoolExpn(OPSYMBOL.OR, (Expn) e, (Expn) c);
			:}
		;

conjunction	::=	negation:n			// conjunctions, associate left-to-right
			{:
				RESULT = n;
			:}
		|	conjunction:c AND negation:n
			{:
				RESULT = new BoolExpn(OPSYMBOL.AND, (Expn) c, (Expn) n);
			:}
		;

negation	::=	compareExpn:e 			// negations
			{:
				RESULT = e;
			:}
		|	NOT negation:n
			{:
				RESULT = new NotExpn((Expn) n);
			:}
		;

compareExpn	::=	arithExpn:a			// comparisons, do not associate
			{:
				RESULT = a;
			:}
		|	arithExpn:a1 EQUAL arithExpn:a2
			{:
				RESULT = new CompareExpn(OPSYMBOL.EQUALS, (Expn) a1, (Expn) a2);
			:}
		| 	arithExpn:a1 NOT EQUAL arithExpn:a2
			{:
				RESULT = new CompareExpn(OPSYMBOL.NOT_EQUALS, (Expn) a1, (Expn) a2);
			:}
		|	arithExpn:a1 LESS arithExpn:a2
			{:
				RESULT = new CompareExpn(OPSYMBOL.LESS_THAN, (Expn) a1, (Expn) a2);
			:}
		|	arithExpn:a1 LESS EQUAL arithExpn:a2
			{:
				RESULT = new CompareExpn(OPSYMBOL.LESS_THAN_EQUALS, (Expn) a1, (Expn) a2);
			:}
		|	arithExpn:a1 GREATER arithExpn:a2
			{:
				RESULT = new CompareExpn(OPSYMBOL.GREATER_THAN, (Expn) a1, (Expn) a2);
			:}
		|	arithExpn:a1 GREATER EQUAL arithExpn:a2
			{:
				RESULT = new CompareExpn(OPSYMBOL.GREATER_THAN_EQUALS, (Expn) a1, (Expn) a2);
			:}
		;

arithExpn	::=	term:t				// expressions, associate + , - left-to-right
			{:
				RESULT = t;
			:}
		|	arithExpn:a  PLUS  term:t
			{:
				RESULT = new ArithExpn(OPSYMBOL.PLUS, (Expn) a, (Expn) t);
			:}
		|	arithExpn:a  MINUS term:t
			{:
				RESULT = new ArithExpn(OPSYMBOL.MINUS, (Expn) a, (Expn) t);
			:}
		;

term		::=	factor:f				// terms, associate * , /   left-to-right
			{:
				RESULT = f;
			:}
		|	term:t TIMES factor:f
			{:
				RESULT = new ArithExpn(OPSYMBOL.TIMES, (Expn) t, (Expn) f);
			:}
		|	term:t DIVIDE factor:f
			{:
				RESULT = new ArithExpn(OPSYMBOL.DIVIDE, (Expn) t, (Expn) f);
			:}
		;

factor		::=	primary:p				// unary minus
			{:
				RESULT = p;
			:}
		|	MINUS factor:f
			{:
				RESULT = new UnaryMinusExpn((Expn) f);
			:}
		;

primary		::=	constant:c				// integer or boolean constant
			{:
				RESULT = c;
			:}
		|	variable:v				// scalar, array variable or function call
			{:
				RESULT = v;
			:}
		|	IDENT:i L_PAREN arguments:a R_PAREN 	// function call
			{:
				RESULT = new FunctionCallExpn(i, (ASTList<Expn>) a);
			:}
		| 	L_PAREN  expression:e  R_PAREN		// parenthesized expression
			{:
				RESULT = e;
			:}
		|	L_PAREN  expression:e1 QUESTION expression:e2 COLON expression:e3 R_PAREN
			{:
				RESULT = new ConditionalExpn((Expn) e1, (Expn) e2, (Expn) e3);
			:}
		;

constant	::=	INTCONST:i	// integer constant
			{:
				RESULT = new IntConstExpn((Integer) i);
			:}
		|	TRUE		// constant true
			{:
				RESULT = new BoolConstExpn(true);
			:}
		|	FALSE		// constant false
			{:
				RESULT = new BoolConstExpn(false);
			:}
		;

variable	::=	IDENT:i					// scalar variable or function call
			{:
				RESULT = new IdentExpn(i);
			:}
		|	IDENT:i L_SQUARE expression:e R_SQUARE	// element of an array
			{:
				RESULT = new SubsExpn((Expn) e, i);
			:}
		;


