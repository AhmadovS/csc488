# % 2-1, 2-2 -> main initialization
PUSHMT 		# push addr of main frame
SETD 0 		# display[0] = 0
PUSH 2
DUPN 		# the return data and dynamic link portions of the main activation frame is null


# % 2-3 -> var a, b, c, d : Integer
# Memory: a(2), b(3), c(4), d(5)
PUSH UNDEFINED  	# inital value of all vars
PUSH 4  			# push number of variables 
DUPN				# allocated space for 4 vars


# % 2-4 -> var p, q, r : Boolean
# Memory: p(6), q(7), r(8)
PUSH UNDEFINED  	# inital value of all vars
PUSH 3  			# push number of variables 
DUPN				# allocated space for 3 vars


# % 2-5 -> a := b + c - d*c + b/c
ADDR 0 2
ADDR 0 3
LOAD
ADDR 0 4
LOAD
ADD
ADDR 0 5
LOAD
ADDR 0 4
LOAD
MUL
SUB
ADDR 0 3
LOAD
ADDR 0 4
LOAD
DIV
ADD
STORE


# % 2-6 -> p := not false or not q and r
	# We simulate "not" by using a simple comparison against 0
	# 0 == 0 -> 1
	# 0 == 1 -> 0
	# For AND we use three consecutive NORs
	# A and B = not(A) nor not(B) = not(not(A) or not(B))

ADDR 0 6
PUSH 0
PUSH 0
EQ
ADDR 0 7
LOAD
PUSH 0
EQ
OR
PUSH 0
EQ
ADDR 0 8
LOAD
PUSH 0
EQ
OR
PUSH 0
EQ
STORE


# % 2-7 -> if p then a := 3
ADDR 0 6	# This is the condition
LOAD
PUSH 79 	# This is the address of the else statement
BF
ADDR 0 2 	# This is the then statement
PUSH 3
STORE


# % 2-8 -> if p or not p then b := 2 else b := 0
ADDR 0 6	# This is the condition
LOAD
ADDR 0 6
LOAD
PUSH 0
EQ
OR
PUSH 95 	# This is the address of the else statement
BF
ADDR 0 3	# This is the then statement
PUSH 2
STORE
PUSH 100	# Branch away from if statement
BR
ADDR 0 3	# This is the else statement
PUSH 0
STORE


# % 2-9 -> while c < 7 do  c := 6
ADDR 0 4
LOAD
PUSH 7
LT
PUSH 115	# If false, branch out of loop
BF
ADDR 0 4
PUSH 1337		# In the original code this is "6" but this results in an infinite loop. For testing purpose we change it to "1337"
STORE
PUSH 102	# Go back to loop
BR


% 2-10 -> while true do  b := b + 1
PUSH 0 		# In the original code this is "1" but this results in an infinite loop. For testing purpose we change it to "0"
PUSH 130
BF
ADDR 0 3
ADDR 0 3
LOAD
PUSH 1
ADD
STORE
PUSH 116
BR


# % 2-11 -> repeat { a := 3 exit b := 7 } until false
PUSH 0
PUSH 143
BF
ADDR 0 2
PUSH 3
STORE
ADDR 0 3
PUSH 7
STORE
PUSH 130
BR


# % 2-12 -> while q or r and not p do  exit when b not= 10
ADDR 0 7
LOAD
ADDR 0 8
LOAD
OR
PUSH 0
EQ
ADDR 0 6
LOAD
PUSH 0
EQ
PUSH 0
EQ
OR
PUSH 0
EQ
PUSH 177 	# Leave loop
BF
# BODY
ADDR 0 3
LOAD
PUSH 10
EQ
PUSH 0
EQ
PUSH 177 	# Leave loop
BF
# Go back to loop
PUSH 144
BR


# % 2-13 -> write "Value is " , a / b, " or not ", newline